<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Translation on The Coding Notes</title>
    <link>http://localhost:1313/zh/tags/translation/</link>
    <description>Recent content in Translation on The Coding Notes</description>
    <image>
      <title>The Coding Notes</title>
      <url>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</url>
      <link>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 04 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/zh/tags/translation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「翻译」复式记账法 (The Double-Entry Counting Method)</title>
      <link>http://localhost:1313/zh/posts/double-entry-counting-method/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/posts/double-entry-counting-method/</guid>
      <description>&lt;p&gt;翻译自 &lt;a href=&#34;https://beancount.github.io/docs/the_double_entry_counting_method.html&#34;&gt;&lt;em&gt;The Double-Entry Counting Method&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;
&lt;p&gt;本文是一份关于复式记账的简要介绍，从计算机科学家的角度撰写。它试图以尽可能简单的方法解释基础记账，简化会计中通常涉及到的某些特殊性。它也代表了 &lt;a href=&#34;http://furius.ca/beancount/&#34;&gt;Beancount&lt;/a&gt; 的工作方式，并且对所有使用纯文本记账的用户都应该适用。&lt;/p&gt;
&lt;p&gt;请注意，我不是会计师，在编写此文档过程中，我可能使用与传统会计培训教授略有不同或不常见的术语。我给自己授权创造一些新的、甚至是不寻常的东西，以便将这些想法尽可能简单明了地解释给那些对它们不熟悉的人。&lt;/p&gt;
&lt;p&gt;我认为每个高中生都应该在高中阶段学习复式记账法，因为这是一项极其有用的组织技能，并且我希望这篇文章可以帮助将其知识传播到专业圈以外的领域。&lt;/p&gt;
&lt;h1 id=&#34;复式记账的基础&#34;&gt;复式记账的基础&lt;/h1&gt;
&lt;p&gt;复式记账法只是一种简单的计数方法，只有一些简单的规则。&lt;/p&gt;
&lt;p&gt;让我们从定义账户的概念开始。账户是一种可以容纳物品的东西，就像一个袋子。它用于计算和累积物品。让我们画一条水平箭头来直观地表示随着时间推移账户中不断变化的内容：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://beancount.github.io/docs/the_double_entry_counting_method/media/2f37aa3938d599d4783ca9b74965026fba0a3b50.png#center&#34; alt=&#34;Untitled&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;左侧，是描述过去，而右侧则是不断增长的时间：现在、未来等。&lt;/p&gt;
&lt;p&gt;现在，让我们假设账户只能包含一种东西，例如美元。所有的账户都以零美元的空内容开始。我们将称账户中单位数量为账户的 &lt;strong&gt;余额 （Balance）&lt;/strong&gt;。请注意，它代表了特定时间点上其内容的情况。我会使用一个数字在帐户时间轴上方绘制余额：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://beancount.github.io/docs/the_double_entry_counting_method/media/54633827be99c315dc937778221752b848411ca9.png#center&#34; alt=&#34;Untitled&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;账户的内容会随着时间而变化。为了改变账户的内容，我们必须向其添加一些东西。我们将这个添加称为对账户的记账，我会在该账户的时间轴上画一个带圈数字来表示这种变化，例如：向该账户中添加 100 美元：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://beancount.github.io/docs/the_double_entry_counting_method/media/004bc3354eb84bf554a8e5080a21f8d16fc29d82.png#center&#34; alt=&#34;Untitled&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;现在，我们可以在记账后绘制更新后的账户余额，并在其后面加上另一个小数字：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://beancount.github.io/docs/the_double_entry_counting_method/media/6281f96c3465982c6bf48fccb302b40f90890311.png#center&#34; alt=&#34;Untitled&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;账户加上 100 美元后，余额现在为 100 美元。&lt;/p&gt;
&lt;p&gt;我们也可以从账户中减去一定金额。例如，我们可以减去 25 美元，这样账户余额就变成了 75 美元：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://beancount.github.io/docs/the_double_entry_counting_method/media/1672e121ec80f8fcdb158bb497e05e6dc809dee5.png#center&#34; alt=&#34;Untitled&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;如果我们减去的金额超过账户余额，账户余额也可能变为负数。例如，如果我们从该账户中取出 200 美元，则余额现在变为 -125 美元：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://beancount.github.io/docs/the_double_entry_counting_method/media/862c0b57a35631a52eead2cf8cdd7b5f2a1aa106.png#center&#34; alt=&#34;Untitled&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;账户中包含负数是完全正常的。请记住，我们所做的只是计数。很快我们会看到，有些账户在它们的时间轴上将保持负余额。&lt;/p&gt;
&lt;h2 id=&#34;报表-statement&#34;&gt;报表 （Statement）&lt;/h2&gt;
&lt;p&gt;值得注意的是，我在前一节中写下的时间线记账与机构为每个客户维护并通常通过邮件发送的纸质账户报表类似：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;时间&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
          &lt;th&gt;金额&lt;/th&gt;
          &lt;th&gt;余额&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;2016-10-02&lt;/td&gt;
          &lt;td&gt;…&lt;/td&gt;
          &lt;td&gt;100.00&lt;/td&gt;
          &lt;td&gt;1100.00&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2016-10-05&lt;/td&gt;
          &lt;td&gt;..&lt;/td&gt;
          &lt;td&gt;-25.00&lt;/td&gt;
          &lt;td&gt;1075.00&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2016-10-06&lt;/td&gt;
          &lt;td&gt;..&lt;/td&gt;
          &lt;td&gt;-200.00&lt;/td&gt;
          &lt;td&gt;875.00&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;最终结余&lt;/td&gt;
          &lt;td&gt;875.00&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有时候金额栏会被分成两个，一个显示正数，另一个显示负数：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reactive Streams 规范翻译</title>
      <link>http://localhost:1313/zh/posts/reactive-streams/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/zh/posts/reactive-streams/</guid>
      <description>&lt;p&gt;翻译自 &lt;a href=&#34;https://www.reactive-streams.org/&#34;&gt;&lt;em&gt;Reactive Streams&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;reactive-streams&#34;&gt;Reactive Streams&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;注：Reactive Streams 直译为响应式流，这里保留英文原词。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Reactive Streams&lt;/em&gt; 是一项提议，旨在为具有&lt;strong&gt;无阻塞背压的异步处理流&lt;/strong&gt;提供标准。这包括针对运行环境（JVM 和 JavaScript）以及网络协议的努力。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reactive Streams&lt;/em&gt; 是为了提供一个&lt;strong&gt;无阻塞背压异步流式处理的标准的一个提议&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;jdk9-javautilconcurrentflow&#34;&gt;JDK9 java.util.concurrent.Flow&lt;/h2&gt;
&lt;p&gt;在 JDK 9 的 &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html&#34;&gt;&lt;em&gt;java.util.concurrent.Flow&lt;/em&gt;&lt;/a&gt; 中可用的接口，分别为 1 ：1 语义上各自对应于 Reactive Streams。这意味着将会有一个迁移期，库（Libraries）将采用 JDK 中的新类型，但是由于库的完全语义等效以及 &lt;code&gt;Reactive Streams &amp;lt;-&amp;gt; Flow&lt;/code&gt; 适配器库和直接与 JDK Flow 类型兼容的 TCK，因此这个迁移期预计会很短。&lt;/p&gt;
&lt;p&gt;如果你有兴趣了解有关 &lt;em&gt;JVM Reactive Streams&lt;/em&gt;，请阅读此 &lt;a href=&#34;https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md&#34;&gt;&lt;em&gt;文章&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;在异步系统中，处理流数据（尤其是数量未先确定的的“实时”数据）需要特别注意。最突出的问题是，需要控制资源消耗，这样快速数据源不会压垮流目的地。为了在并行网络主机或一台多核机器上并行地使用计算资源，需要异步。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reactive Streams&lt;/em&gt; 的主要目标是管理跨异步边界的流数据交换（考虑将元素传递到另一个线程或线程池），同时确保接收方不强制缓存任意数量的数据。换句话说，&lt;strong&gt;背压&lt;/strong&gt;是此模型中不可或缺的一部分，以使在线程之间进行调节的队列收到限制。如果背压的通信是同步的，则异步处理的好处将被抵消（另请看  &lt;a href=&#34;http://reactivemanifesto.org/&#34;&gt;&lt;em&gt;Reactive Manifesto&lt;/em&gt;&lt;/a&gt;），因此必须注意对 Reactive Streams 实现的所有方面进行完全无阻塞和异步行为授权。&lt;/p&gt;
&lt;p&gt;本说明书旨在允许创建许多符合要求的实现，这些实现通过遵守规则将能够平滑地互相操作，并在流应用程序的整个处理图中保留上述好处和特性。&lt;/p&gt;
&lt;h2 id=&#34;范围&#34;&gt;范围&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Reactive Streams&lt;/em&gt; 的范围是找接口、方法和协议的最小集，这些接口、方法和协议将描述实现目标——无阻塞背压的异步处理流，所需要的操作和实体。&lt;/p&gt;
&lt;p&gt;端用户 DSLs（领域特定语言）或者协议绑定 API（应用编程接口）有目的地被排除在范围之外，以鼓励和支持可能使用不同编程语言的不同实现，以尽可能地遵循其平台的习惯用法。&lt;/p&gt;
&lt;p&gt;我们预计，接受这个 &lt;em&gt;Reactive Streams&lt;/em&gt; 规范以及它的实现经验将共同导向广泛的集成，例如，包括将来 JDK 版本中的 Java 平台支持或者在将来的网页浏览器中网络协议的支持。&lt;/p&gt;
&lt;h3 id=&#34;工作组&#34;&gt;工作组&lt;/h3&gt;
&lt;h4 id=&#34;基本含义&#34;&gt;基本含义&lt;/h4&gt;
&lt;p&gt;基本含义定义了如何通过背压来调节流中元素的传输。元素的传输方式，传输过程中的表现形式或者背压的信号发送方式均不属于本规范的一部分。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
