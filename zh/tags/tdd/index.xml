<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>TDD on The Coding Notes</title>
    <link>https://lexcao.io/zh/tags/tdd/</link>
    <description>Recent content in TDD on The Coding Notes</description>
    <image>
      <title>The Coding Notes</title>
      <url>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</url>
      <link>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 03 May 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lexcao.io/zh/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin/Java TDD 开发流程记录</title>
      <link>https://lexcao.io/zh/posts/kotlin-java-tdd-example/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/zh/posts/kotlin-java-tdd-example/</guid>
      <description>&lt;p&gt;通过使用 Kotlin / Java 中 Junit5 和 Mockito 测试框架，在预约功能中演示 TDD 开发流程。&lt;/p&gt;
&lt;h1 id=&#34;tdd-介绍&#34;&gt;TDD 介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TDD（Test-Driven Development）&lt;/strong&gt;
是一种开发流程，中文是「测试驱动开发」。用一句白话形容，就是「先写测试再开发」。先写测试除了能确保测试程式的撰写，还有一个好处：有助于在开发初期厘清程式介面如何设计。详细理论知识可以前往 Wiki 了解，这里不再过多介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91&#34;&gt;测试驱动开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tdd-开发流程5步&#34;&gt;TDD 开发流程（5步）&lt;/h2&gt;
&lt;p&gt;术语说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红灯 - Failure - 测试用例失败&lt;/li&gt;
&lt;li&gt;绿灯 - Success - 测试用例成功&lt;/li&gt;
&lt;li&gt;重构 - Refactor - 重构功能代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选定一个功能，编写测试用例&lt;/li&gt;
&lt;li&gt;执行测试，得到【红灯】&lt;/li&gt;
&lt;li&gt;编写满足测试用例的功能代码&lt;/li&gt;
&lt;li&gt;再次执行，得到【绿灯】&lt;/li&gt;
&lt;li&gt;【重构】代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;p&gt;对于每一个功能，在【红灯】-【绿灯】-【重构】间来回循环往复，不断得到完善。&lt;/p&gt;
&lt;h1 id=&#34;前置工作&#34;&gt;前置工作&lt;/h1&gt;
&lt;h2 id=&#34;代码说明&#34;&gt;代码说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 Kotlin 语言（会有相对应的 Java 代码）&lt;/li&gt;
&lt;li&gt;使用到的测试框架
&lt;ul&gt;
&lt;li&gt;Running: &lt;code&gt;JUnit5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mock:  &lt;code&gt;MockK&lt;/code&gt; / &lt;code&gt;Mockito&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Assertion: &lt;code&gt;Kotest&lt;/code&gt; / &lt;code&gt;AssertJ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只涉及 TDD 的具体流程，不涉及单元测试如何编写（可以看 SpringBoot 单元测试各层）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能介绍&#34;&gt;功能介绍&lt;/h2&gt;
&lt;p&gt;假设一个用户预约的场景。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
