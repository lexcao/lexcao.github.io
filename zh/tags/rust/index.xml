<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on The Coding Notes</title>
    <link>https://lexcao.io/zh/tags/rust/</link>
    <description>Recent content in Rust on The Coding Notes</description>
    <image>
      <title>The Coding Notes</title>
      <url>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</url>
      <link>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</link>
    </image>
    <generator>Hugo -- 0.147.2</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 02 May 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lexcao.io/zh/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>通过构建全栈待办应用学习 Rust</title>
      <link>https://lexcao.io/zh/posts/learn-rust-fullstack/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/zh/posts/learn-rust-fullstack/</guid>
      <description>&lt;h1 id=&#34;什么&#34;&gt;什么&lt;/h1&gt;
&lt;p&gt;我想写一篇关于我如何学习Rust的博客。&lt;/p&gt;
&lt;p&gt;请原谅我在 2022 年才开始学习这个伟大的编程语言。&lt;/p&gt;
&lt;p&gt;为了在实践中学习Rust，我构建了一个全栈待办应用。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;a href=&#34;https://todos.lexcao.io/&#34;&gt;这里&lt;/a&gt; 尝试。相关源码可以在 &lt;a href=&#34;https://github.com/lexcao/rust_fullstack_todo&#34;&gt;GitHub&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;p&gt;现在，我准备写一下它是如何构建的。&lt;/p&gt;
&lt;h1 id=&#34;如何&#34;&gt;如何&lt;/h1&gt;
&lt;p&gt;首先，和大家一样，我也是从 &lt;a href=&#34;https://doc.rust-lang.org/book/&#34;&gt;The Book&lt;/a&gt; 中学习 Rust。这是一本不应该跳过入门学习 Rust 的好书。&lt;/p&gt;
&lt;p&gt;在学习了一些基本的语法之后，我尝试从零开始使用 Rust 构建一个全栈应用，这是一个使用 Rust tokio 的后端服务和一个使用 &lt;a href=&#34;https://rustwasm.github.io/docs/book/&#34;&gt;Rust WASM（Web Assembly）&lt;/a&gt;的前端页面。&lt;/p&gt;
&lt;p&gt;我将分别对这两部分做一个简单的介绍。&lt;/p&gt;
&lt;h3 id=&#34;后端&#34;&gt;后端&lt;/h3&gt;
&lt;p&gt;后台服务是一个的简单的 REST API。使用 &lt;a href=&#34;https://github.com/actix/actix-web&#34;&gt;&lt;code&gt;actix-web&lt;/code&gt;&lt;/a&gt; 作为网络框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我将写另一篇博客，介绍我如何使用 TDD 开发 Rust 后台服务。&lt;/li&gt;
&lt;li&gt;被 Rust 编译器和 Borrow Checker 教育是一次特别的体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于部署，我使用 &lt;a href=&#34;https://supabase.com/&#34;&gt;Supabase&lt;/a&gt; 作为 Postgres 服务，使用 &lt;a href=&#34;https://railway.app/&#34;&gt;Railway&lt;/a&gt; 来运行后台服务 docker 镜像。&lt;/p&gt;
&lt;h3 id=&#34;前端&#34;&gt;前端&lt;/h3&gt;
&lt;p&gt;前端页面有在线和离线数据源，在线是从后台服务器获取数据，而离线是在本地存储。并且有一个按钮来切换它们。&lt;/p&gt;
&lt;p&gt;前台由 Rust WASM 和 &lt;a href=&#34;https://github.com/yewstack/yew&#34;&gt;&lt;code&gt;yew&lt;/code&gt;&lt;/a&gt; 框架驱动，这是一个类似 React 基于组件构建 Web 应用框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你熟悉 JSX，你可以在使用 Yew 时感到很自在。&lt;/li&gt;
&lt;li&gt;在 Rust 中编写类似 React 的代码体验良好，而且真的很有趣。&lt;/li&gt;
&lt;li&gt;但有一些不同之处我想与大家分享，晚点会写一篇博客来谈这个问题，所以敬请关注。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部署的话，是放在 &lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt; 上进行托管，用 GitHub Action 来实现自动部署。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
