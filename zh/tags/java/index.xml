<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on The Coding Notes</title>
    <link>https://lexcao.io/zh/tags/java/</link>
    <description>Recent content in Java on The Coding Notes</description>
    <image>
      <title>The Coding Notes</title>
      <url>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</url>
      <link>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</link>
    </image>
    <generator>Hugo -- 0.147.2</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 25 Sep 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lexcao.io/zh/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Data JPA 多条件连表查询最佳实践</title>
      <link>https://lexcao.io/zh/posts/spring-data-jpa-join-table-best-practice/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/zh/posts/spring-data-jpa-join-table-best-practice/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;本文是 &lt;a href=&#34;https://lexcao.io/zh/posts/spring-data-jpa-join-table&#34;&gt;Spring Data JPA 多条件连表查询&lt;/a&gt; 文章的最佳实践总结。&lt;/p&gt;
&lt;h3 id=&#34;解决什么问题&#34;&gt;解决什么问题？&lt;/h3&gt;
&lt;p&gt;使用 Spring Data JPA 需要针对多条件进行连表查询的场景不使用原生 SQL 或者 HQL 的时候，仅仅通过 JpaSpecificationExecutor&lt;T&gt; 构造 Specification&lt;T&gt; 动态条件语句来实现类型安全的多条件查询。&lt;/p&gt;
&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;
&lt;p&gt;相关上下文背景请前往 &lt;a href=&#34;https://lexcao.io/zh/posts/spring-data-jpa-join-table&#34;&gt;前文&lt;/a&gt; 了解。
这里再提一下接下来示例会用到的场景：&lt;/p&gt;
&lt;p&gt;三个实体：作者、书、书评。其中，作者与书是一对多的关系，书与书评是一对一的关系（当然书评与读者的评价是一对多的关系，这里省去，仅用一对一来进行演示即可）。&lt;/p&gt;
&lt;p&gt;假设有这样的后台查询条件：作者名称、书的发布时间、书评的评分。（这里每个实体取一个字段进行连表查询演示，其他字段同理）。返回书籍列表以及相关表字段。&lt;/p&gt;
&lt;p&gt;【&lt;a href=&#34;https://github.com/lexcao/spring-data-jpa-join-table&#34;&gt;本文所有代码在此&lt;/a&gt;】&lt;/p&gt;
&lt;h1 id=&#34;最佳实践&#34;&gt;最佳实践&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;需要 &lt;code&gt;SELECT&lt;/code&gt; 查询的字段，通过单独的 Java Bean 进行映射
&lt;ul&gt;
&lt;li&gt;利用 JPA 的自动实体映射结果集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EntityGraph&lt;/code&gt; 注解标注返回实体需要 Fetch 的字段
&lt;ul&gt;
&lt;li&gt;无需再手动针对连表进行 &lt;code&gt;fetch&lt;/code&gt;，解决 N+1 问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JOIN ON 查询条件使用 &lt;code&gt;join().on()&lt;/code&gt; 拼接
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Join&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Object, Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; author &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;author.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(cb.&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;(author.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;), param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthorName&lt;/span&gt;()));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;WHERE 查询条件使用 &lt;code&gt;query.where()&lt;/code&gt; 拼接
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;query.&lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt;(cb.&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publishTime&amp;#34;&lt;/span&gt;), param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getBookPublishTime&lt;/span&gt;()));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;代码示例&#34;&gt;代码示例&lt;/h1&gt;
&lt;h2 id=&#34;针对-repository&#34;&gt;针对 Repository&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;需要 &lt;code&gt;override&lt;/code&gt; 已有 &lt;code&gt;findAll&lt;/code&gt; 方法，使用 &lt;code&gt;@EntityGraph&lt;/code&gt; 注解&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;@EntityGraph&lt;/code&gt; 注解，标注额外属性需要 fetch&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// BookJoinRepository.java&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookJoinRepository&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    JpaRepository&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BookJoin, String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, JpaSpecificationExecutor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BookJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@EntityGraph&lt;/span&gt;(attributePaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;review&amp;#34;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Page&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BookJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;(Specification&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BookJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; spec, Pageable pageable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;针对-specification&#34;&gt;针对 Specification&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;WHERE 查询条件使用 &lt;code&gt;query.where()&lt;/code&gt; 拼接&lt;/li&gt;
&lt;li&gt;JOIN ON 查询条件使用 &lt;code&gt;join().on()&lt;/code&gt; 拼接&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Specification&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BookJoin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiQuery_04&lt;/span&gt;(BookJoinQuery param) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (root, query, cb) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getBookPublishTime&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            query.&lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt;(cb.&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;(root.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publishTime&amp;#34;&lt;/span&gt;), param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getBookPublishTime&lt;/span&gt;()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthorName&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Join&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Object, Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; author &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            author.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(cb.&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;(author.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;), param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthorName&lt;/span&gt;()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getReviewScore&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Join&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Object, Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; review &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;review&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            review.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(cb.&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;(review.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;score&amp;#34;&lt;/span&gt;), param.&lt;span style=&#34;color:#a6e22e&#34;&gt;getReviewScore&lt;/span&gt;()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; query.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRestriction&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结果-sql-语句&#34;&gt;结果 SQL 语句&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; bookjoin0_.id           &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; id1_1_0_,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       bookjoin_a1_.id         &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; id1_0_1_,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       bookjoin_r2_.id         &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; id1_2_2_,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       bookjoin0_.author_id    &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; author_i3_1_0_,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       bookjoin0_.publish_time &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; publish_2_1_0_,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       bookjoin0_.review_id    &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; review_i4_1_0_,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       bookjoin_a1_.name       &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; name2_0_1_,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       bookjoin_r2_.score      &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; score2_2_2_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; book bookjoin0_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;inner&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; author bookjoin_a1_ &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; bookjoin0_.author_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bookjoin_a1_.id 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; (bookjoin_a1_.name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;inner&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; review bookjoin_r2_ &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; bookjoin0_.review_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bookjoin_r2_.id 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; (bookjoin_r2_.score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; bookjoin0_.publish_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;limit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，这里案例使用的是 &lt;code&gt;INNER JOIN&lt;/code&gt;，对于 &lt;code&gt;LEFT JOIN&lt;/code&gt; 也是生效的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Data JPA 多条件连表查询 (2022 更新)</title>
      <link>https://lexcao.io/zh/posts/spring-data-jpa-join-table/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/zh/posts/spring-data-jpa-join-table/</guid>
      <description>&lt;h1 id=&#34;痛点&#34;&gt;痛点&lt;/h1&gt;
&lt;p&gt;项目中使用 Spring Data JPA 作为 ORM 框架的时候，实体映射非常方便。Spring Data Repository 的顶层抽象完全解决单实体的查询，面对单实体的复杂查询，也能使用 &lt;code&gt;JpaSpecificationExecutor&amp;lt;T&amp;gt;&lt;/code&gt; 构造 &lt;code&gt;Specification&amp;lt;T&amp;gt;&lt;/code&gt; 轻松应对。&lt;/p&gt;
&lt;p&gt;而对于后台管理报表查询需求来说，需要进行连表多条件动态查询的时候，就显得无从下手。因为它并不像 MyBatis 一样能够在 XML 文件中写出动态 SQL 语句。&lt;/p&gt;
&lt;p&gt;尽管可以使用 &lt;code&gt;EntityManager&lt;/code&gt; 动态拼接原生 SQL 语句，但是该方法返回值为 &lt;code&gt;ResultSet&lt;/code&gt; ，也就是说查出来的实体映射关系需要手动映射（😢这样不太优雅，已经定义出实体，还需要自己去映射）。&lt;/p&gt;
&lt;p&gt;所以，本文的目的是，在现有实体关系的基础上，结合 &lt;code&gt;Specification&amp;lt;T&amp;gt;&lt;/code&gt; 记录下 Spring Data JPA 多条件动态连表查询操作，以及其中的踩坑和优化。&lt;/p&gt;
&lt;p&gt;想要直接看结论的，请看这篇 &lt;a href=&#34;https://lexcao.io/zh/posts/spring-data-jpa-join-table-best-practice&#34;&gt;Spring Data JPA 动态多条件连表查询最佳实践&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;基础操作&#34;&gt;基础操作&lt;/h1&gt;
&lt;p&gt;那么，让我们开始进入代码操作。【&lt;a href=&#34;https://github.com/lexcao/spring-data-jpa-join-table&#34;&gt;本文所有代码在此&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;前置说明&#34;&gt;前置说明&lt;/h2&gt;
&lt;h3 id=&#34;相关依赖&#34;&gt;相关依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java 11&lt;/li&gt;
&lt;li&gt;SpringBoot 2.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;build.gradle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plugins &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot&amp;#39;&lt;/span&gt; version &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.4.2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;io.spring.dependency-management&amp;#39;&lt;/span&gt; version &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.0.11.RELEASE&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-data-jpa&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    compileOnly &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    runtimeOnly &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql:mysql-connector-java&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    annotationProcessor &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    testImplementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    testRuntimeOnly &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com.h2database:h2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;maven.xml&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin/Java TDD 开发流程记录</title>
      <link>https://lexcao.io/zh/posts/kotlin-java-tdd-example/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/zh/posts/kotlin-java-tdd-example/</guid>
      <description>&lt;p&gt;通过使用 Kotlin / Java 中 Junit5 和 Mockito 测试框架，在预约功能中演示 TDD 开发流程。&lt;/p&gt;
&lt;h1 id=&#34;tdd-介绍&#34;&gt;TDD 介绍&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TDD（Test-Driven Development）&lt;/strong&gt;
是一种开发流程，中文是「测试驱动开发」。用一句白话形容，就是「先写测试再开发」。先写测试除了能确保测试程式的撰写，还有一个好处：有助于在开发初期厘清程式介面如何设计。详细理论知识可以前往 Wiki 了解，这里不再过多介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91&#34;&gt;测试驱动开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test Driven Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tdd-开发流程5步&#34;&gt;TDD 开发流程（5步）&lt;/h2&gt;
&lt;p&gt;术语说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红灯 - Failure - 测试用例失败&lt;/li&gt;
&lt;li&gt;绿灯 - Success - 测试用例成功&lt;/li&gt;
&lt;li&gt;重构 - Refactor - 重构功能代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选定一个功能，编写测试用例&lt;/li&gt;
&lt;li&gt;执行测试，得到【红灯】&lt;/li&gt;
&lt;li&gt;编写满足测试用例的功能代码&lt;/li&gt;
&lt;li&gt;再次执行，得到【绿灯】&lt;/li&gt;
&lt;li&gt;【重构】代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;p&gt;对于每一个功能，在【红灯】-【绿灯】-【重构】间来回循环往复，不断得到完善。&lt;/p&gt;
&lt;h1 id=&#34;前置工作&#34;&gt;前置工作&lt;/h1&gt;
&lt;h2 id=&#34;代码说明&#34;&gt;代码说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 Kotlin 语言（会有相对应的 Java 代码）&lt;/li&gt;
&lt;li&gt;使用到的测试框架
&lt;ul&gt;
&lt;li&gt;Running: &lt;code&gt;JUnit5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mock:  &lt;code&gt;MockK&lt;/code&gt; / &lt;code&gt;Mockito&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Assertion: &lt;code&gt;Kotest&lt;/code&gt; / &lt;code&gt;AssertJ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只涉及 TDD 的具体流程，不涉及单元测试如何编写（可以看 SpringBoot 单元测试各层）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能介绍&#34;&gt;功能介绍&lt;/h2&gt;
&lt;p&gt;假设一个用户预约的场景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一次线程死锁排查记录</title>
      <link>https://lexcao.io/zh/posts/async-within-async/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/zh/posts/async-within-async/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;某次发版之后，线上服务低概率出现某台实例接口响应超时，具体表现为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/health&lt;/code&gt; 接口超时报警；&lt;/li&gt;
&lt;li&gt;线程死锁，Tomcat 线程池吃满；&lt;/li&gt;
&lt;li&gt;服务完全无响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保留下当前 heap dump 和 thread stack 后，临时重启服务器恢复正常。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# heap dump&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ jmap -dump:format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b,file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dump.hprof &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# thread stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstack &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;pid&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;gt; stack.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来简单记录一下排查结果。
&lt;br/&gt;（此文为回忆所写，当时排查的思考细节和过程已省略）&lt;/p&gt;
&lt;h1 id=&#34;排查&#34;&gt;排查&lt;/h1&gt;
&lt;h2 id=&#34;heap-dump&#34;&gt;heap dump&lt;/h2&gt;
&lt;h3 id=&#34;使用工具&#34;&gt;使用工具&lt;/h3&gt;
&lt;p&gt;Eclipse + MAT&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装 eclipse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew cask install eclipse-java
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装 eclipse MAT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew cask install mat &lt;span style=&#34;color:#75715e&#34;&gt;# 是的，这个就是 eclipse-mat&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;相关连接&#34;&gt;相关连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse&#34;&gt;&lt;em&gt;&lt;strong&gt;Eclipse&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/mat/&#34;&gt;&lt;em&gt;&lt;strong&gt;Eclipse MAT&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把 &lt;code&gt;heap dump&lt;/code&gt; 文件 &lt;code&gt;dump.hprof&lt;/code&gt; 导入到 MAT。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现有一个名称为 &lt;code&gt;Spring-Async-Scheduler&lt;/code&gt; 异步队列占用特别大。【TODO 图片】&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
