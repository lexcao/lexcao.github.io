<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Practice on The Coding Notes</title>
    <link>https://lexcao.io/tags/practice/</link>
    <description>Recent content in Practice on The Coding Notes</description>
    <image>
      <title>The Coding Notes</title>
      <url>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</url>
      <link>https://images.unsplash.com/photo-1510843572979-e4b9e790fdd7?auto=format&amp;fit=crop&amp;w=720&amp;q=80</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 May 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lexcao.io/tags/practice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Rust by Building a Full-stack Todo Application</title>
      <link>https://lexcao.io/posts/learn-rust-fullstack/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/posts/learn-rust-fullstack/</guid>
      <description>&lt;h1 id=&#34;what&#34;&gt;What&lt;/h1&gt;
&lt;p&gt;I want to write a blog about how I learned Rust.&lt;/p&gt;
&lt;p&gt;Please forgive me that I just started learning such a great programming language in 2022.&lt;/p&gt;
&lt;p&gt;To learn Rust by doing, I have built a full-stack todo application.&lt;/p&gt;
&lt;p&gt;You can try it &lt;a href=&#34;https://todos.lexcao.io&#34;&gt;here&lt;/a&gt;. The source code is available at &lt;a href=&#34;https://github.com/lexcao/rust_fullstack_todo&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here I am going to write about how to build it.&lt;/p&gt;
&lt;h1 id=&#34;how&#34;&gt;How&lt;/h1&gt;
&lt;p&gt;Firstly, as everyone beginning, I learn Rust from &lt;a href=&#34;https://doc.rust-lang.org/book/&#34;&gt;the book&lt;/a&gt; as well. It is an awesome book to start learning Rust, and you should not skip it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generate Converter for Kotlin Class by KAPT</title>
      <link>https://lexcao.io/posts/konverter/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://lexcao.io/posts/konverter/</guid>
      <description>&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;In web backend development, the operation of an entity need to code a number of similar classes to handle request (avoiding the direct use of entities), which resulting in related terminology:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PO (&lt;em&gt;Persistent Object&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;DTO (&lt;em&gt;Data Transfer Object&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;BO (&lt;em&gt;Business Object&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;VO (&lt;em&gt;View Object&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these classes trim a few fields directly from the entity. For example, by using &lt;code&gt;OrderEntity&lt;/code&gt; in a request to create an order, it would process like following:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
