[{"content":"In this article, I\u0026rsquo;m excited to introduce genapi, a code generator for Golang HTTP clients. For comprehensive documentation and implementation details, you can explore the genapi website or check out our GitHub repository.\nFrom Manual to Automatic: Evolution of Golang HTTP Client In Golang development, making HTTP API calls is a very common requirement. Through a weather API example, this article will demonstrate how HTTP client code evolves from manual writing to automatic generation. Let\u0026rsquo;s look at this simple weather API:\nGET /api/weather?city=shanghai Response: { \u0026#34;temperature\u0026#34;: 25, \u0026#34;humidity\u0026#34;: 60, \u0026#34;condition\u0026#34;: \u0026#34;sunny\u0026#34; } Initial Manual Approach Initially, we might write code directly like this:\nfunc getWeather(city string) (*Weather, error) { resp, err := http.Get(\u0026#34;https://api.weather.com/api/weather?city=\u0026#34; + city) if err != nil { return nil, err } defer resp.Body.Close() var weather Weather if err := json.NewDecoder(resp.Body).Decode(\u0026amp;weather); err != nil { return nil, err } return \u0026amp;weather, nil } This approach is straightforward but has several issues:\nHardcoded URLs in the code Error-prone parameter concatenation Duplicate error handling logic Repetitive response parsing code Templated Requests To address these issues, we begin abstracting and templatizing the code:\ntype Client struct { baseURL string client *http.Client } func (c *Client) doRequest(method, path string, query url.Values, result interface{}) error { u, _ := url.Parse(c.baseURL + path) u.RawQuery = query.Encode() req, err := http.NewRequest(method, u.String(), nil) if err != nil { return err } resp, err := c.client.Do(req) if err != nil { return err } defer resp.Body.Close() return json.NewDecoder(resp.Body).Decode(result) } func (c *Client) GetWeather(city string) (*Weather, error) { query := url.Values{} query.Set(\u0026#34;city\u0026#34;, city) var weather Weather err := c.doRequest(\u0026#34;GET\u0026#34;, \u0026#34;/api/weather\u0026#34;, query, \u0026amp;weather) return \u0026amp;weather, err } These improvements bring several benefits:\nUnified error handling mechanism Safer parameter construction Reusable request handling logic However, we still need to manually write each API method.\ngenapi: Annotation-Driven Code Generation To further improve development efficiency, introducing genapi. Through simple annotations, we can automatically generate all API call code:\npackage api import \u0026#34;github.com/lexcao/genapi\u0026#34; //go:generate go run github.com/lexcao/genapi/cmd/genapi -file $GOFILE // WeatherAPI defines the weather service API // @BaseURL(\u0026#34;https://api.weather.com\u0026#34;) type WeatherAPI interface { genapi.Interface // @get(\u0026#34;/api/weather\u0026#34;) // @query(\u0026#34;city\u0026#34;, \u0026#34;{city}\u0026#34;) GetWeather(ctx context.Context, city string) (*Weather, error) } By just defining the interface and adding annotations, genapi will automatically generate the complete client code using go generate:\n// CODE GENERATED BY genapi. DO NOT EDIT. package api import ( \u0026#34;context\u0026#34; \u0026#34;github.com/lexcao/genapi\u0026#34; \u0026#34;net/url\u0026#34; ) type implWeatherAPI struct { client genapi.HttpClient } // SetHttpClient implements genapi.Interface func (i *implWeatherAPI) SetHttpClient(client genapi.HttpClient) { i.client = client } func (i *implWeatherAPI) GetWeather(ctx context.Context, city string) (*Weather, error) { resp, err := i.client.Do(\u0026amp;genapi.Request{ Method: \u0026#34;get\u0026#34;, Path: \u0026#34;/api/weather\u0026#34;, Queries: url.Values{ \u0026#34;city\u0026#34;: []string{ city, }, }, Context: ctx, }) return genapi.HandleResponse[*Weather](resp, err) } func init() { genapi.Register[WeatherAPI, *implWeatherAPI]( genapi.Config{ BaseURL: \u0026#34;https://api.weather.com\u0026#34;, }, ) } Using the Generated Code func main() { client := genapi.New[api.WeatherAPI]() weather, err := client.GetWeather(context.TODO(), \u0026#34;shanghai\u0026#34;) } Summary Through annotation-driven approach, genapi enables developers to:\nFocus on interface definition, avoiding repetitive code Improve development efficiency and reduce maintenance costs Make code clearer and more reliable ","permalink":"https://lexcao.io/posts/genapi/","summary":"\u003cp\u003eIn this article, I\u0026rsquo;m excited to introduce genapi, a code generator for Golang HTTP clients. For comprehensive documentation and implementation details, you can explore the \u003ca href=\"https://lexcao.io/genapi/\"\u003egenapi website\u003c/a\u003e or check out our \u003ca href=\"https://github.com/lexcao/genapi\"\u003eGitHub repository\u003c/a\u003e.\u003c/p\u003e\n\u003ch1 id=\"from-manual-to-automatic-evolution-of-golang-http-client\"\u003eFrom Manual to Automatic: Evolution of Golang HTTP Client\u003c/h1\u003e\n\u003cp\u003eIn Golang development, making HTTP API calls is a very common requirement. Through a weather API example, this article will demonstrate how HTTP client code evolves from manual writing to automatic generation. Let\u0026rsquo;s look at this simple weather API:\u003c/p\u003e","title":"Introducing genapi: A Golang HTTP Client Code Generator"},{"content":"What I want to write a blog about how I learned Rust.\nPlease forgive me that I just started learning such a great programming language in 2022.\nTo learn Rust by doing, I have built a full-stack todo application.\nYou can try it here. The source code is available at GitHub.\nHere I am going to write about how to build it.\nHow Firstly, as everyone beginning, I learn Rust from the book as well. It is an awesome book to start learning Rust, and you should not skip it.\nAfter learning some basic grammar, I try to start building a todo application all in Rust from the beginning, which is a backend server from Rust tokio and a frontend page from Rust WASM (Web Assembly).\nI am going to give a brief introduction to each of these two parts.\nBackend A backend server is a simple web server for REST endpoints. I use actix-web for the web framework, which is extremely fast web framework for Rust.\nI will write another blog about how I develop a Rust web server by using TDD. It is a great experience that is taught by the Rust compiler and borrow checker. For deployment, I am using Supabase as Postgres service and Railway to ship server docker image.\nFrontend The todo application has both online and offline data sources, for online is fetching data from the backend server, while offline is in local storage. And I made a button to switch them.\nThe frontend is powered by Rust WASM and yew framework, which is a React-like functional component framework for building web applications.\nIf you are familiar with JSX you could feel quite at home when using Yew. It is a great experience to write React-like code in Rust, and it is really fun. But there are some differences I want to share, I am also going to write a blog to talk about it. so stay tuned. For deployment, I am hosting on Vercel with GitHub action to deploy automatically.\nOutcome One of the benefits of full-stack Rust is sharing code. I made a common library through Cargo workspace, in which the backend and frontend can share the common package. The common library contains requests and models which can be used by both sides. And it is tested by the backend when integration test, so the frontend can use it without additional coding and testing.\nThe whole development experience is all Rust and a little CSS. I enjoy it.\nThanks to the Rust compiler, it is a great teacher to teach learning Rust.\nReferences Source code Rust The Book WASM actix-web yew Vercel Railway Supabase ","permalink":"https://lexcao.io/posts/learn-rust-fullstack/","summary":"\u003ch1 id=\"what\"\u003eWhat\u003c/h1\u003e\n\u003cp\u003eI want to write a blog about how I learned Rust.\u003c/p\u003e\n\u003cp\u003ePlease forgive me that I just started learning such a great programming language in 2022.\u003c/p\u003e\n\u003cp\u003eTo learn Rust by doing, I have built a full-stack todo application.\u003c/p\u003e\n\u003cp\u003eYou can try it \u003ca href=\"https://todos.lexcao.io\"\u003ehere\u003c/a\u003e. The source code is available at \u003ca href=\"https://github.com/lexcao/rust_fullstack_todo\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHere I am going to write about how to build it.\u003c/p\u003e\n\u003ch1 id=\"how\"\u003eHow\u003c/h1\u003e\n\u003cp\u003eFirstly, as everyone beginning, I learn Rust from \u003ca href=\"https://doc.rust-lang.org/book/\"\u003ethe book\u003c/a\u003e as well. It is an awesome book to start learning Rust, and you should not skip it.\u003c/p\u003e","title":"Learn Rust by Building a Full-stack Todo Application"},{"content":"Recently, I encountered a weird equality question about Kotlin which does not usually get much attention while coding. So here is the thought process.\nBackground The following code snippet is using Kotlin 1.3.72.\nThe business logic of it has been removed and only remained the code structure for reproducing the question.\n// a enum for state enum class MyState { OK, CANCELED } // it might return nullable MyState fun processing(): MyState? { // asuming that it returns the CANCELED state return MyState.CANCELED } // when processing the state fun handleState() { // the type of state is MyState? val state = processing() if (state == CANCELED) { // if condition counld not reach here println(\u0026#34;Handle \u0026lt;CANCELED\u0026gt; state\u0026#34;) } } The reason why it could not reach the CANCELED condition is the import.\nimport javax.print.attribute.standard.JobState.CANCELED // the same name CANCELED is static imported, and the definition is as below: // public static final JobState CANCELED = new JobState (7); üëè Great, it is so easy to fix it.\nüò† But, wait! Why does two mismatched types compile successfully in Kotlin?\nü§î Think ‚ùìQuestion:\nü§ê Why does it compile successfully when comparing with Kotlin enum and Java static type? ‚ùì‚ùì‚ùìOther questions:\nIs there any mismatch by another class excepting enum? How does the enum compile by Kotlin compiler? Is this happens in Java? (supposed not) I have not found anything after searching from Stack Overflow and YouTrack. Maybe it is not a question.üò¢\nSo I started to make an experiment to dive into the equality with mismatched types on Kotlin compiler.\nüëâ Jump to conclusion directly.\nüî¨Experiment Step01 Setting Expectations Let\u0026rsquo;s have a look at the definition of equality in Java and Kotlin.\nIn Java,\n== compares the references between two objects. It is requires the two objects are in the same type before comparing. equals() compares the content between two objects. In Kotlin,\nIn Kotlin there are two types of equality:\nStructural equality (a check for equals()).\na == b =\u0026gt; a?.equals(b) ?: (b === null) Referential equality (two references point to the same object);\na === b =\u0026gt; a and b point to the same object \u0026mdash; kotlin equality\nIn a short,\nThe == in Java is equivalent to === in Kotlin; The == in Kotlin combines equals() and == in Java. The expectations are:\nIn Java,\nequals() compiles successfully and runs as usual. The parameter of equal() is Object, no type mismatch errors. == does not compile. Equality between reference types require they are same types. In Kotlin,\n=== does not compile. The behavior is same to == in Java as above. == does not compile. There is reference comparison between two objects, so does not compile when type mismatch as Java does. Step02 Collecting Variables The variables collected from the above code are:\nvariable values control flow Kotlin: if / when | Java: if / switch subjects Kotlin: class / enum class / object Java: class / enum / static field condition K - K / J - J / J - K step03 Basic Filtering For control flow,\nto use if for the same behaviors on if and when in Kotlin. to use if in Java for the functionality of switch which only supports for enum / string / primitive type in Java. if (condition) {} For equality,\nto use == and equals() in Java. to use == in Kotlin, while === is omitted for == in Java. For subjects, there are two subjects of a and b on each type.\nsubjects Java Kotlin class MyJavaClassA / MyJavaClassB MyKotlinClassA / MyKotlinClassB enum RetentionPolicy / ElementType AnnotationRetention / AnnotationTarget object / static JobState / JobStateReason MyKotlinObjectA / MyKotlinObjectB public class MyJavaClassA {} // MyJavaClassA.java public class MyJavaClassB {} // MyJavaClassB.java class MyKotlinClassA // MyKotlinClassA.kt class MyKotlinClassB // MyKotlinClassB.kt object MyKotlinObject // MyKotlinObjectA object MyKotlinObject // MyKotlinObjectB // RetentionPolicy : java.lang.annotation.RetentionPolicy // ElementType : java.lang.annotation.ElementType // AnnotationRetention : kotlin.annotation.AnnotationRetention // AnnotationTarget : kotlin.annotation.AnnotationTarget // JobState : javax.print.attribute.standard.JobState // JobStateReason : javax.print.attribute.standard.JobStateReason For condition, Kotlin nullable type need to consider.\n// So, here we have J - J K - K K? - K? J - K J - K? K - K? step04 Verifying Template // Java code JavaGenerated.java public class JavaGenerated { void if_JavaClass_To_JavaClass(MyJavaClassB a) { if (a.equals(new MyJavaClassA())) { } else if (a == new MyJavaClassA()) { } } } // Kotlin code KotlinGenerated.kt class KotlinGenerated { fun if_JavaClass_To_JavaClass(a: MyJavaClassB) { if (a == MyJavaClassA()) { } } } step05 Coding By using the template above, it is time to start coding with those variables.\nIt is really repeated and tedious to write such templates for the occasion which there are so many combinations of the variables.\nSo here I decide to use JavaPoet and KotlinPoet to generate code.\n1. Enumerate three types for test for JavaCase and KotlinCase respectively 2. Combine JavaCase and KotlinCase two by two to get java-kotlin 3. Combine condition according to java-kotlin * J 2 J * J 2 K * K 2 K * K? 2 K * K? 2 J 4. Generate functions or methods of KotlinIf and JavaIf according to the conditions 5. Generate Java and Kotlin files according to JavaPoet and KotinPoet The generated code is quite a lot, if you are interested, check following files:\nJavaGenerated.java KotlinGenerated.kt step06 Watching Result Environment:\nJava Version 1.8.0_172 Kotlin Version 1.3.72 IDEA Version 2020.1 There are two types of results:\n[error] does not compile. The compiler will error, which is under read wavy line in IDEA. [warning] compiles fine.The IDEA will warn, which is highlighted by yellow in IDEA. JavaGenerated.java Exactly as expected,\n== does not compile. equals() compiles fine, additionally, there is a friendly warning in IDEA. type == equals Class [error] Operator \u0026lsquo;==\u0026rsquo; cannot be applied [warning] inconvertible types Static [error] Operator \u0026lsquo;==\u0026rsquo; cannot be applied [warning] inconvertible types Enum [error] Operator \u0026lsquo;==\u0026rsquo; cannot be applied [warning] condition is always false KotlinGenerated.kt Partially as expected,\n=== does not compile. == does not compile on Class / Static from Kotlin. type == Class [error] EQUALITY_NOT_APPLICABLE,Operator \u0026lsquo;==\u0026rsquo; cannot be applied Static [error] EQUALITY_NOT_APPLICABLE,Operator \u0026lsquo;==\u0026rsquo; cannot be applied Enum [warning] INCOMPATIBLE_ENUM_COMPARISON,Comparison of incompatible enums is always unsuccessful Not as expected,\nClass / Static from Java compiles fine. Enum compiles fine. Here are the relevant codes:\nfun if_JavaClass_To_JavaClass(a: MyJavaClassB) { if (a == MyJavaClassA()) { } } fun if_JavaStatic_To_JavaStatic(a: JobStateReason) { if (a == JobState.CANCELED) { } } fun if_NullableKotlinEnum_To_JavaStatic(a: AnnotationRetention?) { if (a == JobState.CANCELED) { } } It is described as follows:\nJava class types (Class / Static) compile fine. JavaClass_To_JavaClass JavaStatic_To_JavaStatic It compiles fine when Nullable Kotlin enum to Java static type. NullableKotlinEnum_To_JavaStatic Then, the questions are:\nWhy is the equality between Class in Kotlin stricter than that in Java? Why does the equality between enums compile fine? Why is it possible to compile fine when comparing between two different Java classes? Why is it possible to compile fine when comparing between Kotlin nullable enum to Java static type? step07 Finding Why Let\u0026rsquo;s recap the definition of equality from Kotlin official docs.\na == b =\u0026gt; a?.equals(b) ?: (b === null) a === b =\u0026gt; a and b point to the same object 1. Why is the equality between Class / Static in Kotlin stricter than that in Java? (Not found yet) TODO: Maybe it could overview the source code to find how the compiler warns EQUALITY_NOT_APPLICABLE in Kotlin.\n2. Why does the comparison between enums compile fine? In Java, enum is actually a syntactic sugar and will eventually be compiled into a generic class.\nabstract class Enum\u0026lt;E extends Enum\u0026lt;E\u0026gt;\u0026gt; { ... } In Kotlin with no exception, enum class is also syntactic sugar and will be compiled into a generic class.\nabstract class Enum\u0026lt;E : Enum\u0026lt;E\u0026gt;\u0026gt; { ... } When comparing with two enums, it goes to compare between same Enum class but with different generic type. So it could compile fine and there would be no errors about type mismatch.\nAdditionally, IDEA gives a friendly warning about INCOMPATIBLE_ENUM_COMPARISON.\n3. Why is it possible to compile fine when comparing between two different Java classes? There is strict Nullable / Notnull syntax in Kotlin.\nWhen calling Java from Kotlin, the compiler could not inference the Null info of it, Nullable as default, for the undetermined Null info of Java class.\nThere would be a ! from IDEA type inference when calling from Java. It indicates that the Null info is unknown.\n(Additionally, It is possible to inference the correct Null info from Kotlin compiler by using the annotations that are @Nullable / @Notnull provided by JetBrains in Java code)\n[TODO add some screenshots]\nSo, when comparing with two Nullable types, it goes to b === null condition and compiles fine.\n4. Why is it possible to compile fine when comparing between Kotlin nullable enum to Java static type? From exploration above, it finally gets to the point. Here are the conclusions:\nThere would be a same Enum type after compiling enums. The Null info of the Java static type is unknown. When comparing with two Nullable types, it compiles fine. // It goes a friendly warning which is [INCOMPATIBLE_ENUM_COMPARISON] // after telling the Null info of Java static type to the compiler fun if_NullableKotlinEnum_To_JavaStatic(a: AnnotationRetention?) { // By using !! to tell it is NotNull if (a == JobState.CANCELED!!) { // [INCOMPATIBLE_ENUM_COMPARISON] Comparison of incompatible enums // \u0026#39;AnnotationRetention?\u0026#39; and \u0026#39;JobState\u0026#39; is always unsuccessful } } üëÄ Summary It is fun and interesting for the process of experiment. The knowledge of foundation in Kotlin equality is not solid. Deep dived into the equality and enum of Kotlin and Java. What\u0026rsquo;s next: to learn about the equality of Kotlin compiler\u0026rsquo;s source code. üîó Links Github Source Code Kotlin Equality Docs JavaPoet KotlinPoet JavaGenerated.java KotlinGenerated.kt ","permalink":"https://lexcao.io/posts/kotlin-equality-diving/","summary":"\u003cp\u003eRecently, I encountered a weird equality question about Kotlin which does not usually get much attention while coding. So here is the thought process.\u003c/p\u003e\n\u003ch1 id=\"background\"\u003eBackground\u003c/h1\u003e\n\u003cp\u003eThe following code snippet is using Kotlin \u003ccode\u003e1.3.72\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe business logic of it has been removed and only remained the code structure for reproducing the question.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-kotlin\" data-lang=\"kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// a enum for state\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyState\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    OK, CANCELED\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// it might return nullable MyState\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocessing\u003c/span\u003e(): MyState? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// asuming that it returns the CANCELED state\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyState\u003c/span\u003e.CANCELED\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// when processing the state\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandleState\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// the type of state is MyState?\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eval\u003c/span\u003e state = processing()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (state \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e CANCELED) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// if condition counld not reach here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Handle \u0026lt;CANCELED\u0026gt; state\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe reason why it could not reach the CANCELED condition is the \u003cem\u003e\u003cstrong\u003eimport\u003c/strong\u003e\u003c/em\u003e.\u003c/p\u003e","title":"Kotlin Weird Equality"},{"content":"Background In web backend development, the operation of an entity need to code a number of similar classes to handle request (avoiding the direct use of entities), which resulting in related terminology:\nPO (Persistent Object) DTO (Data Transfer Object) BO (Business Object) VO (View Object) Most of these classes trim a few fields directly from the entity. For example, by using OrderEntity in a request to create an order, it would process like following:\n1. Receive request body `CreateOrderRequest` as DTO 2. Construct `OrderQuery` as BO to query orders 3. Construct `QueryEntity` as PO for the order persistent 4. Construct `OrderBO` as BO for further service consumption 5. Respond body `CreateOrderResponse` as VO You will see, there are 4 classes derived from OrderEntity which are just partial cropping of the entity, but a lot of repetitive code has to be written (yes, you can copy and paste). Of course, you should use inheritance if there is going to be a new field differed from OrderEntity.\nIn web backend development with Kotlin, the syntax features of the data class offer many advantages (getter, setter, equals, hashCode\u0026hellip;), however, you can\u0026rsquo;t avoid creating similar duplicate classes.\nSo, Konverter is here to solve classes which trimmed fields from entity. Additionally, it supports to generate the conversion functions between two classes.\nNote, till now it only supports on Kotlin, because the generated code of conversion function implemented by extension function and only generating Kotlin code.\nWhat is Konverter Konverter is automated generating the classes which trimmed from entity, and those conversion functions by KAPT (Kotlin Annotation Processing Tool annotation processing and Kotlin Poet code generating.\nThere are two main annotations:\n@Konvertable generates trimmed classes and respondent converter; @Konvert generates the converter for specified class. Let\u0026rsquo;s see how it works.\nHow to use 1. Add dependency // for build.gradle.kts repositories { maven(\u0026#34;https://jitpack.io\u0026#34;) } dependencies { kapt(\u0026#34;com.github.lexcao:konverter:master-SNAPSHOT\u0026#34;) implementation(\u0026#34;com.github.lexcao:konverter-annotation:master-SNAPSHOT\u0026#34;) } // for build.gradle repositories { maven { url \u0026#39;https://jitpack.io\u0026#39; } } dependencies { kapt \u0026#39;com.github.lexcao:konverter:master-SNAPSHOT\u0026#39; implementation \u0026#39;com.github.lexcao:konverter-annotation:master-SNAPSHOT\u0026#39; } 2. Add annotations @Konvertable( To(name = \u0026#34;LoginDTO\u0026#34;, pick = [\u0026#34;username\u0026#34;, \u0026#34;password\u0026#34;]), To(name = \u0026#34;UserListDTO\u0026#34;, omit = [\u0026#34;password\u0026#34;]) ) @Konvert(to = UserVO::class) data class UserEntity( val id: Long, @Konvert.Field(\u0026#34;name\u0026#34;) val username: String, val password: String, @Konvert.By(GenderEnumConverter::class) val gender: Int ) 3. Then compileKotlin to process generation For @Konvertable /** * Auto generated code by @Konvertable */ data class LoginDTO( val username: String, val password: String ) /** * Auto generated code by @Konvertable */ data class UserListDTO( val id: Long, val username: String, val gender: Int ) /** * Auto generated code by @Konvert */ fun UserEntity.toLoginDTO(username: String = this@toLoginDTO.username, password: String = this@toLoginDTO.password): LoginDTO = LoginDTO(username=username,password=password) /** * Auto generated code by @Konvert */ fun LoginDTO.toUserEntity( id: Long = 0L, username: String = this@toUserEntity.username, password: String = this@toUserEntity.password, gender: Int = 0 ): UserEntity = UserEntity(id=id,username=username,password=password,gender=gender) /** * Auto generated code by @Konvert */ fun UserEntity.toUserListDTO( id: Long = this@toUserListDTO.id, username: String = this@toUserListDTO.username, gender: Int = this@toUserListDTO.gender ): UserListDTO = UserListDTO(id=id,username=username,gender=gender) /** * Auto generated code by @Konvert */ fun UserListDTO.toUserEntity( id: Long = this@toUserEntity.id, username: String = this@toUserEntity.username, password: String = \u0026#34;\u0026#34;, gender: Int = this@toUserEntity.gender ): UserEntity = UserEntity(id=id,username=username,password=password,gender=gender) /** * Auto generated code by @Konvert */ fun UserEntity.toRegisterDTO( username: String = this@toRegisterDTO.username, password: String = this@toRegisterDTO.password, gender: Int = this@toRegisterDTO.gender ): RegisterDTO = RegisterDTO(username=username,password=password,gender=gender) /** * Auto generated code by @Konvert */ fun RegisterDTO.toUserEntity( id: Long = 0L, username: String = this@toUserEntity.username, password: String = this@toUserEntity.password, gender: Int = this@toUserEntity.gender ): UserEntity = UserEntity(id=id,username=username,password=password,gender=gender) For @Konvert // the class to convert to data class UserVO( val id: String, val name: String, val gender: GenderEnum ) enum class GenderEnum { MALE, FEMALE; } object GenderEnumConverter : Konvert.KonvertBy\u0026lt;Int, GenderEnum\u0026gt; { override fun Int.forward(): GenderEnum { return GenderEnum.values()[this] } override fun GenderEnum.backward(): Int { return this.ordinal } } // generated code ** * Auto generated code by @Konvert */ fun UserEntity.toUserVO( id: String = this@toUserVO.id.toString(), name: String = this@toUserVO.username, gender: GenderEnum = with(GenderEnumConverter) { this@toUserVO.gender.forward() } ): UserVO = UserVO(id=id,name=name,gender=gender) /** * Auto generated code by @Konvert */ fun UserVO.toUserEntity( id: Long = this@toUserEntity.id.toLong(), username: String = this@toUserEntity.name, password: String = \u0026#34;\u0026#34;, gender: Int = with(GenderEnumConverter) { this@toUserEntity.gender.backward() } ): UserEntity = UserEntity(id=id,username=username,password=password,gender=gender) API notes the rules of conversion and generation\nIf converting to String type, it will use toString() while the type is not match; If converting to primitive type, it will use default value of primitive type when missing; If converting to nullable type, it will use null for default value when missing; It will need be assigned explicitly when converting to reference type (excepting String) or unknown type. What next code optimization and test case support the default value of object and collection support nested class support for Java fix bugs support for using the default value of parameters on constructors or fields on class from original when missing (from now, Kotlin KAPT is only support for default value of fields, but not for parameters) Source code Konverter in Github Konverter-demo in Github ","permalink":"https://lexcao.io/posts/konverter/","summary":"\u003ch1 id=\"background\"\u003eBackground\u003c/h1\u003e\n\u003cp\u003eIn web backend development, the operation of an entity need to code a number of similar classes to handle request (avoiding the direct use of entities), which resulting in related terminology:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePO (\u003cem\u003ePersistent Object\u003c/em\u003e)\u003c/li\u003e\n\u003cli\u003eDTO (\u003cem\u003eData Transfer Object\u003c/em\u003e)\u003c/li\u003e\n\u003cli\u003eBO (\u003cem\u003eBusiness Object\u003c/em\u003e)\u003c/li\u003e\n\u003cli\u003eVO (\u003cem\u003eView Object\u003c/em\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMost of these classes trim a few fields directly from the entity. For example, by using \u003ccode\u003eOrderEntity\u003c/code\u003e in a request to create an order, it would process like following:\u003c/p\u003e","title":"Generate Converter for Kotlin Class by KAPT"},{"content":"Reactive Streams Reactive Streams started as an initiative in late 2013 between engineers at Netflix, Pivotal and Lightbend.\nReactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure. This encompasses efforts aimed at runtime environments (JVM and JavaScript) as well as network protocols.\nYou can read the origin specification on official website of Reactive Streams.\nAlso, you can read the Chinese translation from here.\nAsynchronous stream processing with non-blocking back pressure. The Reactive Streams is composed of following:\nAsynchronous; Stream; Non-blocking; Back pressure. The Java interfaces, you can find details on GitHub.\npublic interface Publisher\u0026lt;T\u0026gt; { public void subscribe(Subscriber\u0026lt;? super T\u0026gt; s); } public interface Subscriber\u0026lt;T\u0026gt; { public void onSubscribe(Subscription s); public void onNext(T t); public void onError(Throwable t); public void onComplete(); } public interface Subscription { public void request(long n); public void cancel(); } public interface Processor\u0026lt;T, R\u0026gt; extends Subscriber\u0026lt;T\u0026gt;, Publisher\u0026lt;R\u0026gt; { } Reactive Extensions An API for asynchronous programming with observable streams\nReactiveX is a combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming\n\u0026ndash; Reactive Extensions\nProject Reactor Reactor is a fourth-generation Reactive library for building non-blocking applications on the JVM based on the Reactive Streams Specification\nComposability and readability Data as a flow manipulated with a rich vocabulary of operators Nothing happens until you subscribe Backpressure or the ability for the consumer to signal the producer that the rate of emission is too high High level but high value abstraction that is concurrency-agnostic \u0026ndash; From Imperative to Reactive Programming\nFeatures:\nFully non-blocking. Integrates Java API. Completable Future Stream Duration Flux and Mono. Flux: A Reactive Streams Publisher with rx operators that emits 0 to N elements, and then completes. Mono: A Reactive Streams Publisher with basic rx operators that completes successfully by emitting an element, or with an error. Implements the Reactive Streams specification. You can find details on GitHub.\nBy the way, you can follow the Lite Rx API Hands-on to learn the basic APIs.\nAnd here How to Choose Operators.\nReactor Netty Reactor Netty offers non-blocking and backpressure-ready TCP/HTTP/UDP clients \u0026amp; servers based on Netty framework.\n\u0026ndash; Reactor Netty\nSpring Framework WebFlux The reactive-stack web framework, Spring WebFlux, was added later in version 5.0. It is fully non-blocking, supports Reactive Streams back pressure, and runs on such servers as Netty, Undertow, and Servlet 3.1+ containers\n\u0026ndash; Spring WebFlux\ndebug .checkpoint Hooks.onOperatorDebug() reactor-tools ReactorDebugAgent (works in production) java agent RSocket A binary protocol based on Reactive Streams back pressure\nFeatures\nbi-directional multiplexed message-based binary protocol Interaction Models\nrequest-response (1 to 1) fire and forget (1 to 0 udp) request stream (1 to many pub / sub) request channel (many to many) Protocol\nWebSocket TCP UDP Summary Reactive Streams is a specification.\nProject Reactor is JVM implementation base on the specification.\nSpring WebFlux is Spring framework integration with Project Reactor.\nRSocket is binary protocol base on the specification.\nReferences Reactive Streams Reactive Streams JVM Reactive Extensions Project Reactor Reactor Core Lite Rx API Hands-on How to Choose Operators Reactor Netty Spring WebFlux ","permalink":"https://lexcao.io/posts/reactive-overview/","summary":"\u003ch1 id=\"reactive-streams\"\u003eReactive Streams\u003c/h1\u003e\n\u003cp\u003eReactive Streams started as an initiative in late 2013 between engineers at \u003ca href=\"https://en.wikipedia.org/wiki/Netflix\"\u003e\u003cem\u003eNetflix\u003c/em\u003e\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Pivotal_Software\"\u003e\u003cem\u003ePivotal\u003c/em\u003e\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Lightbend\"\u003e\u003cem\u003eLightbend\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReactive Streams is an initiative to provide \u003cstrong\u003ea standard for asynchronous stream processing with non-blocking back pressure\u003c/strong\u003e. This encompasses efforts aimed at runtime environments (JVM and JavaScript) as well as network protocols.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eYou can read the origin specification on official website of \u003ca href=\"https://www.reactive-streams.org/\"\u003e\u003cem\u003eReactive Streams\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAlso, you can read the Chinese translation from \u003ca href=\"https://lexcao.github.io/zh/posts/reactive-streams\"\u003e\u003cem\u003ehere\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch5 id=\"asynchronous-stream-processing-with-non-blocking-back-pressure\"\u003e\u003cstrong\u003eAsynchronous stream processing with non-blocking back pressure.\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003eThe Reactive Streams is composed of following:\u003c/p\u003e","title":"Reactive Overview"},{"content":"Introduction I am Lixin Cao in Chinese Pinyin. I was finding a way to give myself an English name, then I found a post, How to choose an English name, which gives an useful method for choosing an English name, by which I made a program to help choose an English name.\nYou can try it here.\nI will cover some detail of the post and the program in the below.\nThe post says Do not try to be creative in picking an English name.\nAvoid:\nDo not try to pick a fun or cute-sounding name from a movie, television, or video game character Do not pick a name that you think sounds cool or trendy, because Americans will think it sounds stupid Do not pick a name because your friends think it sounds cute, because your friends are not the Americans you have to interact with in the future Do not translate some positive-sounding word in your language into English and make that into your name Do:\nChoose a name from the 100 most popular names for your birth year If possible, choose a name that sounds somewhat similar to your real name Do not choose a variation as your official name Do not worry about what a name means The program does Choose a name from the 100 most popular names for your birth year\nI download data from SSA baby names data which the post suggested.\nI put it on the GitHub, which has already been formatted in JSON.\nYou can use it for free or make another English name application. Enjoy!\nHow I choose Finding inspiration from my Chinese name, Lixin Can, which I want an English name began with L. Then I look for some English names in 1994 to choose which I liked. Levi Alex Lucas Liam Checking name following my family name as username on social website, e.g. LeviCao. Levi (biblical) Alex (already taken) Lucas (too popular) Liam (too popular) Search each name meaning from NameBerry and BehindTheName to find variants of the name. I like Alex most, then I finally picked Lex for my English name. References English-name-picker Source code English-name-dataset How to choose an English name SSA baby names SSA baby names data ","permalink":"https://lexcao.io/posts/choose-english-name/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eI am Lixin Cao in Chinese Pinyin. I was finding a way to give myself an English name, then I found a post, \u003ca href=\"http://www.pgbovine.net/choosing-english-name.htm\"\u003e\u003cem\u003eHow to choose an English name\u003c/em\u003e\u003c/a\u003e, which gives an useful method for choosing an English name, by which I made a program to help choose an English name.\u003c/p\u003e\n\u003cp\u003eYou can try it \u003ca href=\"https://lexcao.github.io/English-name-picker\"\u003e\u003cem\u003ehere\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI will cover some detail of the post and the program in the below.\u003c/p\u003e\n\u003ch1 id=\"the-post-says\"\u003eThe post says\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eDo not try to be creative in picking an English name.\u003c/strong\u003e\u003c/p\u003e","title":"Choose An English Name"},{"content":"It is hard to choose a suitable static website generator, especially when you want to build website like blog for the first time. This is my first time to build a blog and have not enough time to go through some popular generators, which I have chosen Jekyll at the beginning but it is not a best one. In the future I am going to try another generators.\nHere is some brief information I found from Google and hope it should be useful for you to decide starting up on what generator.\nI have selected three generators from GitHub, which are\nJekyll Hugo Hexo WHAT is Static Website Generator HTML files; no server side processing or database communication; more secure than any dynamic website; super scaling when used with CDN; caching will bring more effective than dynamic pages; super fast to require. Jekyll built in Ruby; supported by GitHub; use GitHub Pages for free to host. Pros free and open source; RubyGems supports to build themes as gems; easy and simple to use; great GitHub Pages support; comes with default and decent minimal theme out of box. Cons As your website content grows, the build process becomes significantly slower.\nFeature Liquid template engine; Gem based themes; Markdown and YAML format support; Sass pre-processing customize; CoffeeScript support by official plugin. Hugo built in Go. Pros free and open source; speed, fast speed, engineered and optimized for speed; many built-in support; dynamic API driven content; unlimited content types; shortcakes, a flexible alternative to Markdown; i18n; redirection with aliases; pagination. pre-made Go templates and patterns; dependency free (no need Go installed, bc it\u0026rsquo;s pre-compiled binary); powerful content model. Cons themes use Go templates so need to be familiar with Go; no ship with default theme; lack for extensibility and plugins(because Go is compiled language). Features Go template; i18n; supporting dynamic API; Hexo built in Node.js. Pros also fast; easy to deploy on GitHub Pages; Chinese (maybe cons for non-Chinese); Chinese community. Cons non-English. Features EJS template engine; supporting Chinese; friendly with HTML + CSS + Javascript. I am using Jekyll\nWhat I like Huge number of free themes and plugins; There are many tutorial for the beginners; Deploy on GitHub Pages without any skills. What I dislike It is not supported by GitHub Pages to many plugins; I18n is not supported. By the way, the build speed is not considered for me because of the small count of articles at the moment, which I might change to other generator when it becomes slightly slow on building with Jekyll in the future.\nThe rank of speed among three generators are Hugo \u0026gt; Hexo \u0026gt; Jekyll.\nThe next generator would be Hugo in the future and I would update this post.\nReferences How to Choose the Right Static Generator: Jekyll vs. Hugo vs. Hexo Static Gen ","permalink":"https://lexcao.io/posts/jekyll-hugo-hexo/","summary":"\u003cp\u003eIt is hard to choose a suitable static website generator, especially when you want to build website like blog for the first time. This is my first time to build a blog and have not enough time to go through some popular generators, which I have chosen \u003ccode\u003eJekyll\u003c/code\u003e at the beginning but it is not a best one. In the future I am going to try another generators.\u003c/p\u003e\n\u003cp\u003eHere is some brief information I found from Google and hope it should be useful for you to decide starting up on what generator.\u003c/p\u003e","title":"Jekyll / Hugo / Hexo Comparison"},{"content":"Goal Support multi-language, mainly in English and supplemented by Chinese; When visiting pages begin with /, e.g. /about.html, /posts/hello-world, English pages would be shown; When visiting pages began with /zh/, e.g. /zh/about.html, /zh/posts/hello-world, Chinese pages would be shown; When visiting ../hello-world posts, corresponding langugage posts would be jumped via the link; Posts which are specified language would only be shown in archive and index pages. Defect As 404.html page was not supported for separate language file, two langugage content would be shown on it at the same time. The jekyll-paginate-v2, a plugin supports pagination for multi-language, is not supported by GitHub Pages. So the blog has not been supported pagination so far. See details below. It is a little bit tricky to show date in multi-language way. Some string formatting work should be taken as it is able to have done that but is not a better way. Please see Jekyll Date Formatting. Setup Firstly, I found a i18n plugin Jekyll Multiple Languages Plugin.\nThe number of stars in this plugin is the most among multi-language plugins, and there are many other related multi-language plugins listed. You can use it without hesitate if you don\u0026rsquo;t want to setup custom configuration.\nCurrently for simplistic and customize, and also omitting unnecessary features in the plugin, I choose to use custom rules to support multi-language.\n1. Single Post Setting There are two properties needed to added for every posts and pages\nuid for unique post whose English and Chinese are the same uid; Note: uid can be declared in any other name, e.g document_id. locale for language symbol which specify what pages should be shown. So add configuration in Front Matter of every posts\n--- uid: hello-world locale: zh --- 2. For Posts It is very redundant that locale has to be added in Front Matter every posts at every time. Do not repeat yourself. I am going to use different folders to distinguish posts in different languages and set a default value to locale in config file.\nCreate zh folder to store Chinese posts in _posts directory, which origin _posts folder is used to store English posts. When visiting /zh/posts/some-posts Chinese pages are shown.\n(Of course, follow below to set another path to use different directory)\ndefaults: - values: #1 locale: en - scope: #2 path: _posts/zh/** type: posts values: locale: zh #1 not set for scope means global default: all posts and pages are default to en; #2 set for scope means in the path of _posts/zh/**: all posts are default to zh. 3. For Common String The common string is such as Archive and About from menu or Next Page.\nBy the feature of site.data, create locales folder in /_data directory, and create en.yaml and zh.yaml for storing English and Chinese string.\n# in /_data/locales/en.yml menu: about: About archive: Archive # in /_data/locales/zh.yml menu: about: ÂÖ≥‰∫é archive: ÂΩíÊ°£ Replace the old words specified by locale\n\u0026lt;nav class=\u0026#34;menu-content\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt;{{ site.data.locales[page.locale].menu.about }}\u0026lt;/a\u0026gt; \u0026lt;/nav\u0026gt; 4. For Pages The pages are archive.html and about.html such page type in Jekyll.\nAs use of collection, _zh folder need to be created independently in root directory.\ncollections: zh: output: true And create corresponding files in _zh folder\n/menu/archive.html /menu/about.html 5. Language Selector The selector is a button for switching pages or posts between different locale.\nCreate a new file named language-selector.html in _includes folder.\nFinding corresponding language page from posts, pages and collections.\n{% if page.uid %} \u0026lt;!-- #1 --\u0026gt; \u0026lt;div class=\u0026#34;language-selector\u0026#34;\u0026gt; {% assign postsOrPages = site.posts \u0026lt;!-- #2 --\u0026gt; | concat: site.pages | concat: site.zh | where: \u0026#34;uid\u0026#34;, page.uid | sort: \u0026#34;locale\u0026#34; %} {% for item in postsOrPages %} {% unless item.url contains \u0026#39;/page/\u0026#39; %} \u0026lt;!-- #3 --\u0026gt; \u0026lt;a href=\u0026#34;{{ item.url }}\u0026#34; class=\u0026#34;{{ item.locale }}\u0026#34;\u0026gt; {{ site.data.locales[item.locale].name }} \u0026lt;!-- #4 --\u0026gt; \u0026lt;/a\u0026gt; {% endunless %} {% endfor %} \u0026lt;/div\u0026gt; {% endif %} #1 Selector is shown only on uid existed; #2 Concat the list of posts, pages and zh to find the same uid pages; #3 Filter the pages not in /pages/ folder; #4 Get the common string of language symbol form locale 6. For Archive Page The posts should be filtered in specified locale language manually in archive.html.\nThere is a convenient method to get the next post by post.next which dose not guarantee the same locale posts shown in one page. Should do an alternative way\n\u0026lt;!-- archive.html --\u0026gt; \u0026lt;!-- use the index of posts instead of post.next --\u0026gt; {% assign posts = site.posts | where: \u0026#34;locale\u0026#34;, page.locale %} {% for index in (0..posts.size) limit: posts.size %} {% assign post = posts[index] %} {% assign prevIndex = index | minus: 1 %} {% assign prev = posts[prevIndex] %} {% capture year %}{{ post.date | date: \u0026#39;%Y\u0026#39; }}{% endcapture %} {% capture prevYear %}{{ prev.date | date: \u0026#39;%Y\u0026#39; }}{% endcapture %} {% if year != prevYear or index == 0 %} \u0026lt;h3\u0026gt;{{ year }}\u0026lt;/h3\u0026gt; {% endif %} \u0026lt;li itemscope\u0026gt; \u0026lt;a href=\u0026#34;{{ post.url }}\u0026#34;\u0026gt;{{ post.title }}\u0026lt;/a\u0026gt; \u0026lt;p class=\u0026#34;post-date\u0026#34;\u0026gt;\u0026lt;span\u0026gt;{{ post.date | date: \u0026#34;%B %-d\u0026#34; }}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} The key point is that using the index of posts after filtered by locale instead of post.next.\n7. Multi-Language SEO Create a new page named language-seo.html in _included folder to specify corresponding language pages by hreflang.\n{% assign posts = site.posts | where:\u0026#34;uid\u0026#34;, page.uid | sort: \u0026#39;locale\u0026#39; %} {% for post in posts %} \u0026lt;link rel=\u0026#34;alternate\u0026#34; hreflang=\u0026#34;{{ post.locale }}\u0026#34; href=\u0026#34;{{ post.url }}\u0026#34; /\u0026gt; {% endfor %} As well as include in head.html.\n\u0026lt;!-- Language SEO --\u0026gt; {% include language-seo.html %} Lastly Some unimportant and regular configuration are omitted, please to see the Source: lexcao.github.io if you want to learn the full setup.\nReferences Jekyll Multiple Language Plugin Making Jekyll Multilingual Multi Languages with Jekyll Deploy A Multi-Language Jekyll Site Jekyll-Paginate-V2 One More Thing Support Pagination The old pagination plugin jekyll-pagination-v1 is no longer suitable for the short of filtering by the criteria. It is not able to show the one language list of posts on specified language.\nFortunately, jekyll-pagination-v2 announced to support pagination on multi-language way. As I mentioned above, the permitted plugins provided by GitHub Pages does not contain this plugin. Which you need to deploy automated manually if you want to use. Here are setup jekyll-pagination-v2.\nGemfile install $ gem \u0026#39;jekyll-paginate-v2\u0026#39; _config.yaml setup Note: the configuration of v2 and v1 is not compatible.\nplugins: - jekyll-paginate-v2 pagination: enabled: true per_page: 5 permalink: /page/:num/ sort_reverse: true pages configs You need add more configuration in Front Matter of index.html to paginate.\n# /index.html --- pagination: enabled: true # yes, enable is needed here locale: en --- pagination.locale is to specify the criteria of the language according to locale of the pages. I use locale for my custom rules for multi-language so that the pagination use the same filed for reusable.\nCorrespondly, create index.html in _zh folder.\n# /_zh/index.html --- permalink: /zh/ # I don\u0026#39;t like suffix of .html so do this pagination: enabled: true locale: zh --- Note: I came cross a problem here that the pagination was not working after I put the index.html into _zh folder, which has not been solved yet.\nThe temporary solution was to put zh/index.html file to the root directory, and renamed to index_zh.html.\npaginating The use of paginating is as same as the v1 does. Please see Pagination.\nReferences Jekyll-Paginate-v2 Jekyll-Paginate-V2 Filter Locales ","permalink":"https://lexcao.io/posts/jekyll-multi-language-without-plugin/","summary":"\u003ch1 id=\"goal\"\u003eGoal\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSupport multi-language, mainly in English and supplemented by Chinese;\u003c/li\u003e\n\u003cli\u003eWhen visiting pages begin with \u003ccode\u003e/\u003c/code\u003e, e.g. \u003ccode\u003e/about.html\u003c/code\u003e, \u003ccode\u003e/posts/hello-world\u003c/code\u003e, English pages would be  shown;\u003c/li\u003e\n\u003cli\u003eWhen visiting pages began with \u003ccode\u003e/zh/\u003c/code\u003e, e.g. \u003ccode\u003e/zh/about.html\u003c/code\u003e, \u003ccode\u003e/zh/posts/hello-world\u003c/code\u003e, Chinese pages would be shown;\u003c/li\u003e\n\u003cli\u003eWhen visiting \u003ccode\u003e../hello-world\u003c/code\u003e posts, corresponding langugage posts would be jumped via the link;\u003c/li\u003e\n\u003cli\u003ePosts which are specified language would only be shown in \u003ccode\u003earchive\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e pages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"defect\"\u003eDefect\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eAs \u003ccode\u003e404.html\u003c/code\u003e page was not supported for separate language file, two langugage content would be shown on it at the same time.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ejekyll-paginate-v2\u003c/code\u003e, a plugin supports pagination for multi-language, is not supported by GitHub Pages. So the blog has not been supported pagination so far. See details \u003ca href=\"/posts/jekyll-multi-language-without-plugin/#pagination\"\u003e\u003cem\u003ebelow\u003c/em\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eIt is a little bit tricky to show date in multi-language way. Some string formatting work should be taken as it is able to have done that but is not a better way. Please see \u003ca href=\"http://alanwsmith.com/jekyll-liquid-date-formatting-examples\"\u003e\u003cem\u003eJekyll Date Formatting\u003c/em\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"setup\"\u003eSetup\u003c/h1\u003e\n\u003cp\u003eFirstly, I found a \u003ccode\u003ei18n\u003c/code\u003e plugin \u003ca href=\"https://github.com/kurtsson/jekyll-multiple-languages-plugin\"\u003e\u003cem\u003eJekyll Multiple Languages Plugin\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e","title":"Jekyll Multi-Language without Plugin"},{"content":"Hello There Welcome to my blog, I am Lex Cao, ÊõπÂéÜÈë´ in Chinese.\nThe name of the blog is CodingNotes ‰ª£Á†ÅÁ¨îËÆ∞.\nThis blog is used to share/summary/note some knowledge/thinking/ideas related to programming in my life or work.\nAbout Me Base Shenzhen China.\nUse:\nJava / Kotlin (mainly used ‚ù§Ô∏è), SpringBoot, SpringCloud. If you want to contact me.\nAbout Blog Static website generator\nHugo https://gohugo.io/ Theme is hugo-PaperMod https://github.com/adityatelange/hugo-PaperMod Code hosting GitHub Here is the source code of the blog Blog deploying\nGitHub Pages Chinese and English Support For better practice of English, English and Chinese are supported by the blog. Click the language character in the upper right corner of the page to switch when there is a page with corresponding language.\nBy the way, the blog is mainly in English, of course, there will be corresponding Chinese content.\nStay tuned.\nThank You for Reading Related Links Code icon by Icons8 Powered by Hugo with PaperMode theme Deployed by GitHub Pages Free to use photos by Pexels Free to use photos by Unsplash ","permalink":"https://lexcao.io/about/","summary":"\u003ch2 id=\"hello-there\"\u003eHello There\u003c/h2\u003e\n\u003cp\u003eWelcome to my blog, I am \u003cstrong\u003eLex Cao\u003c/strong\u003e, \u003ccode\u003eÊõπÂéÜÈë´\u003c/code\u003e in Chinese.\u003c/p\u003e\n\u003cp\u003eThe name of the blog is \u003cstrong\u003eCodingNotes\u003c/strong\u003e \u003ccode\u003e‰ª£Á†ÅÁ¨îËÆ∞\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis blog is used to \u003cstrong\u003eshare/summary/note\u003c/strong\u003e some \u003cstrong\u003eknowledge/thinking/ideas\u003c/strong\u003e related to programming in my life or work.\u003c/p\u003e\n\u003ch2 id=\"about-me\"\u003eAbout Me\u003c/h2\u003e\n\u003cp\u003eBase Shenzhen China.\u003c/p\u003e\n\u003cp\u003eUse:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJava / Kotlin (mainly used ‚ù§Ô∏è),\u003c/li\u003e\n\u003cli\u003eSpringBoot,\u003c/li\u003e\n\u003cli\u003eSpringCloud.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you want to \u003ca href=\"mailto:lexcao@foxmail.com\"\u003econtact me\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"about-blog\"\u003eAbout Blog\u003c/h2\u003e\n\u003cp\u003eStatic website generator\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eHugo\u003c/code\u003e \u003ca href=\"https://gohugo.io/\"\u003ehttps://gohugo.io/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTheme is \u003ccode\u003ehugo-PaperMod\u003c/code\u003e \u003ca href=\"https://github.com/adityatelange/hugo-PaperMod\"\u003ehttps://github.com/adityatelange/hugo-PaperMod\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCode hosting GitHub\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/lexcao/lexcao.github.io\"\u003e\u003cem\u003eHere\u003c/em\u003e\u003c/a\u003e is the source code of the blog\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBlog deploying\u003c/p\u003e","title":"About"},{"content":"Hello World Blog configuration:\nStatic Website Generation Jekyll 3.8.5 Ruby 2.6.0 Lagrange theme Website Aynalysis Google Analysis Baidu Analysis Deployment GitHub Pages This is my first post, which I would like to note the beginning of the blog as the simplest \u0026ldquo;hello world\u0026rdquo; and how to build such blog by yourself.\nThe article will contain three steps:\nChoose type of blog Prepare something needed Compose them Step 01 Choose Type of Blog There are static websites and dynamic websites depending on whether the frontend web page interacts with the backend server or database.\nStatic websites:\nJust HTML / CSS / JS No backend server storing data Data is pre-generated Dynamic websites:\nApply with HTML / CSS / JS Fetching data from backend server Response user requests dynamically So, static blog is:\nPosts are pre-generated No need for backend server While dynamic blog is:\nPosts are fetching from backend server Fetching occurs in frontend dynamically Considering this is my first blog building, I choose simple static blog. And I choose Jekyll for static website generator as there are so many open source static website generator so far.\nTo choose appropriate static website generator, please see\n[Jekyll / Hugo / Hexo Static Comparision]({{ \u0026ldquo;/posts/jekyll-hugo-hexo\u0026rdquo; | relative_url }}).\nStep 02 Prepare Something Needed Preparation needs 4 parts below:\nBlog articles; Blog introduction; Author information; Blog domain. Several Articles to Post Several articles should be written and ready to post in advance.\nGitHub Pages Deployment Notes (this article üòÜ); [Jekyll Supports Multiple Language without Plugin]({{ \u0026ldquo;/posts/jekyll-multi-language-without-plugin\u0026rdquo; | relative_url }}) (this blog supports English and Chinese üòÜ); [Jekyll / Hugo / Hexo Comparision]({{ \u0026ldquo;/posts/jekyll-hugo-hexo\u0026rdquo; | relative_url }}) (this blog use Jekyll üòÜ); [Choose An English Name]({{ \u0026ldquo;/posts/choose-english-name\u0026rdquo; | relative_url }}) (mine is Lex Cao üòÜ). Blog Introduction Write a about.html page in advance which only contains brief information. And add more details in the future.\nDetail page, please see [Abount Me]({{ \u0026ldquo;/menu/about.html\u0026rdquo; | relative_url }})\nAuthor Information Pen name I choose an English name for myself, Lex Cao.\nTo Choose an English name, please see How to choose an English name.\nBlog name English name is CodingNotes.\nChinese name is ‰ª£Á†ÅÁ¨îËÆ∞.\nBlog Domain caolixin.com The Chinese PinYin of my Chinese name with no meaning.\nlexcao.com Pretty good but already taken.\nthecodingnotes.com Just ok, and a little bit long.\nSo, I would keep it for lexcao.github.io until a better domain found.\nStep 03 Compose them Jekyll Install Relative links:\nInstall on MacOS Jekyll with Bundle Creating a GitHub Pages with Jekyll Used commands:\n# install ruby 2.6.0+ $ xcode-select --install $ brew install ruby $ export PATH=/usr/local/opt/ruby/bin:$PATH $ source ~/.zshrc # install jekyll \u0026amp; bundler $ gem install --user-install bundler jekyll $ export PATH=$HOME/.gem/ruby/2.6.0/bin:$PATH $ source ~/.zshrc # init $ cd /blogs/github-pages-jekyll $ git init $ jekyll new . $ jekyll serve Theme Regarding the theme, I would rather be simpler.\nUsefull theme gallery:\njekyllthemes.org/ jekyllthemes.io/ Find liked theme:\nLagrange Chalk Type Kikofri Lagrange was the selected theme over 4 themes above finally.\nPlugin Notice github-pages plugin is needed to automated deployment when GitHub Pages integration Jekyll, which some white-list plugins are limited while deploying. See Permit plugins with versions; The method to use more plugins (not in the white-list) is to push _site folder to the repository other than automated deplyment by Github Pages and to auto deploy manually. I would like to use automated deployment by Github Pages because of the first blog. Multiple Language Setting There are many tricks need to be set, please see\nJekyll Supports Multiple Language without Plugin.\nDeploy on GitHub Ofiicial tutorial\nCreate a Repository The name of repository should be a fixed pattern \u0026lt;user\u0026gt;.github.io.\nFor example, lexcao.github.io\nPush articles to GitHub # add remote repository $ git remote add origin https://github.com/lexcao/lexcao.github.io.git $ git push -u origin master It is Ready for Visiting Go to the settings of the repository Settings \u0026gt; Options \u0026gt; scroll down to bottom.\nIf you can see Your site is published at https://lexcao.github.io/ the blog success publishing.\nVisit https://lexcao.github.io to see the website\nOn repository page, there is a easy way to see every time deployments from environment, which automated deployment is triggered by pushing to master branch by default.\nWebsite Analystic Google Analytics Create a media resource from Google Analytics to get track ID UA-xxx-x and include the tracking code. Create a tracking code in Google Tag Manager, add a Google Analytics code tracking based on the UA-xxx-x ID you got above, include the global tracking code and pubish. Optional, associate to Google Search Console with `Google Analytics. Notice:\nVariable name of Chiese is not allowed in Google Tag Manager; If there is net::ERR_BLOCKED_BY_CLIENT error on requesting js file after GitHub Pages re-deployment, refresh page without ad block extensions would solve the problem. Baidu Analytics To install tracking of Baidu is much easier, registration then including the code on Baidu Analytics page.\nReal-time performance is slightly worse than Google Analytics (probably the reason why the domain name github.io is abroad)\nDone So far, the entire blog has been running perfectly. It is time to concentrate on writing articles üòä.\n","permalink":"https://lexcao.io/posts/hello-world/","summary":"\u003ch1 id=\"hello-world\"\u003eHello World\u003c/h1\u003e\n\u003cp\u003eBlog configuration:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStatic Website Generation\n\u003cul\u003e\n\u003cli\u003eJekyll 3.8.5\u003c/li\u003e\n\u003cli\u003eRuby 2.6.0\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://jekyllthemes.org/themes/lagrange/\"\u003eLagrange\u003c/a\u003e theme\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWebsite Aynalysis\n\u003cul\u003e\n\u003cli\u003eGoogle Analysis\u003c/li\u003e\n\u003cli\u003eBaidu Analysis\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDeployment\n\u003cul\u003e\n\u003cli\u003eGitHub Pages\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis is my first post, which I would like to note the beginning of the blog as the simplest \u0026ldquo;hello world\u0026rdquo; and how to build such blog by yourself.\u003c/p\u003e\n\u003cp\u003eThe article will contain three steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eChoose type of blog\u003c/li\u003e\n\u003cli\u003ePrepare something needed\u003c/li\u003e\n\u003cli\u003eCompose them\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"step-01-choose-type-of-blog\"\u003eStep 01 Choose Type of Blog\u003c/h1\u003e\n\u003cp\u003eThere are static websites and dynamic websites depending on whether the frontend web page interacts with the backend server or database.\u003c/p\u003e","title":"Hello World"},{"content":"","permalink":"https://lexcao.io/projects/","summary":"","title":"Projects"}]